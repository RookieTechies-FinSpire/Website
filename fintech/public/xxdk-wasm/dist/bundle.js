!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("xxdk",[],t):"object"==typeof exports?exports.xxdk=t():e.xxdk=t()}(this,(()=>(()=>{"use strict";var e={607:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,s)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.InitXXDK=void 0,s(n(699),t),s(n(443),t);var o=n(432);Object.defineProperty(t,"InitXXDK",{enumerable:!0,get:function(){return o.InitXXDK}})},443:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(s,o){function r(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((i=i.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,i,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(n=1,i&&(s=2&a[0]?i.return:a[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,a[1])).done)return s;switch(i=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){r.label=a[1];break}if(6===a[0]&&r.label<s[1]){r.label=s[1],s=a;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(a);break}s[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.stateIndexedDbWorkerPath=t.dmIndexedDbWorkerPath=t.channelsIndexedDbWorkerPath=t.logFileWorkerPath=t.setXXDKBasePath=t.xxdkBasePath=t.default_xxdk_path=t.xxdk_s3_path=void 0;var o=n(412),r=n(39),a="/dist/wasm_exec.js";function l(e,t){return i(this,void 0,void 0,(function(){var n,i,o;return s(this,(function(s){switch(s.label){case 0:return[4,c()];case 1:return n=s.sent(),i=["importScripts('"+n+"');  ","("+t.toString()+")('"+e+"');"],o=URL.createObjectURL(new Blob(i,{type:"text/javascript"})),console.info("[XXDK] Loaded "+e.toString()+" worker at: "+o.toString()),console.trace("[XXDK] worker contents: "+i.toString()),[2,new URL(o)]}}))}))}function c(){return i(this,void 0,void 0,(function(){var e,t,n,i;return s(this,(function(s){switch(s.label){case 0:if(void 0!==window.xxdkWasmExecBlobURL)return[2,window.xxdkWasmExecBlobURL];e=new URL(window.xxdkBasePath+a.toString()),console.trace("[XXDK] wasm_exec.js download url: "+e.toString()),s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(e)];case 2:return[4,s.sent().text()];case 3:return t=s.sent(),n=URL.createObjectURL(new Blob([t],{type:"text/javascript"})),window.xxdkWasmExecBlobURL=new URL(n),[3,5];case 4:throw i=s.sent(),console.error("[XXDK] Unable to load wasm_exec.js into a blob url: "+i),i;case 5:return console.info("[XXDK] wasm_exec.js loaded at: "+window.xxdkWasmExecBlobURL),[2,window.xxdkWasmExecBlobURL]}}))}))}t.xxdk_s3_path="https://elixxir-bins.s3-us-west-1.amazonaws.com/wasm/",t.default_xxdk_path=new URL(o.BundleVersion,t.xxdk_s3_path),"undefined"!=typeof window&&void 0===window.xxdkBasePath&&(window.xxdkBasePath=t.default_xxdk_path),void 0===t.xxdkBasePath&&(t.xxdkBasePath=t.default_xxdk_path),t.setXXDKBasePath=function(e){"undefined"!=typeof window&&(window.xxdkBasePath=e),t.xxdkBasePath=e},t.logFileWorkerPath=function(){return i(this,void 0,void 0,(function(){var e,t;return s(this,(function(i){return e=n(861),t=new URL(window.xxdkBasePath+e.toString()),console.info("Loading logFileWorker ("+t+")"),[2,l(t,r.startLogFileWorker)]}))}))},t.channelsIndexedDbWorkerPath=function(){return i(this,void 0,void 0,(function(){var e,t;return s(this,(function(i){return e=n(862),t=new URL(window.xxdkBasePath+e.toString()),console.info("Loading channelsIndexedDbWorker ("+t+")"),[2,l(t,r.startChannelsIndexedDbWorker)]}))}))},t.dmIndexedDbWorkerPath=function(){return i(this,void 0,void 0,(function(){var e,t;return s(this,(function(i){return e=n(526),t=new URL(window.xxdkBasePath+e.toString()),console.info("Loading dmIndexedDbWorker ("+t+")"),[2,l(t,r.startDmIndexedDbWorker)]}))}))},t.stateIndexedDbWorkerPath=function(){return i(this,void 0,void 0,(function(){var e,t;return s(this,(function(i){return e=n(162),t=new URL(window.xxdkBasePath+e.toString()),console.info("Loading stateIndexedDbWorker ("+t+")"),[2,l(t,r.startStateIndexedDbWorker)]}))}))}},699:(e,t)=>{var n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.PrivacyLevel=t.LogLevel=void 0,function(e){e[e.TRACE=0]="TRACE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.CRITICAL=5]="CRITICAL",e[e.FATAL=6]="FATAL"}(n||(t.LogLevel=n={})),function(e){e[e.Public=0]="Public",e[e.Private=1]="Private",e[e.Secret=2]="Secret"}(i||(t.PrivacyLevel=i={}))},412:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BundleVersion=void 0;var i=n(147);t.BundleVersion=i.name+"-"+i.version},432:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(s,o){function r(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((i=i.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,i,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(n=1,i&&(s=2&a[0]?i.return:a[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,a[1])).done)return s;switch(i=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){r.label=a[1];break}if(6===a[0]&&r.label<s[1]){r.label=s[1],s=a;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(a);break}s[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.InitXXDK=void 0;var o=n(443),r=n(947);t.InitXXDK=function(){return new Promise((function(e){return i(void 0,void 0,void 0,(function(){var t,i,a,l,c,d,u,h,m,f,w,p,b,x,g,v,y,_,k,D,P,I,L,W,S,R,U,T,j,C,O,E,X,N,G,A,B,M;return s(this,(function(s){switch(s.label){case 0:return[4,Promise.resolve().then((function(){return n(385)}))];case 1:return s.sent(),t=new Promise((function(e){window.onWasmInitialized=e})),i=new URL(window.xxdkBasePath.toString()+r.toString()),console.log("Fetching xxdkWASM: "+i),console.log("Fetching xxdkWASM base: "+window.xxdkBasePath),console.log("Fetching xxdkWASM path: "+r),[4,(0,o.logFileWorkerPath)()];case 2:return a=s.sent(),console.log("Got logworkerURL: "+a),(l=new window.Go).argv=["--logLevel=1","--fileLogLevel=1","--workerScriptURL="+a],[4,null===WebAssembly||void 0===WebAssembly?void 0:WebAssembly.instantiateStreaming(fetch(i),l.importObject)];case 3:return c=s.sent(),l.run(c.instance),[4,t];case 4:return s.sent(),d=window||{},u=d.Base64ToUint8Array,h=d.ConstructIdentity,m=d.DecodePrivateURL,f=d.DecodePublicURL,w=d.GenerateChannelIdentity,p=d.GetChannelInfo,b=d.GetChannelJSON,x=d.GetClientVersion,g=d.GetDefaultCMixParams,v=d.GetOrInitPassword,y=d.GetPublicChannelIdentityFromPrivate,_=d.GetShareUrlType,k=d.GetVersion,D=d.GetWasmSemanticVersion,P=d.ImportPrivateIdentity,I=d.IsNicknameValid,L=d.LoadChannelsManagerWithIndexedDb,W=d.LoadCmix,S=d.LoadNotifications,R=d.LoadNotificationsDummy,U=d.LoadSynchronizedCmix,T=d.NewChannelsManagerWithIndexedDb,j=d.NewCmix,C=d.NewDMClientWithIndexedDb,O=d.NewDatabaseCipher,E=d.NewDummyTrafficManager,X=d.NewSynchronizedCmix,N=d.Purge,G=d.ValidForever,(A=window.GetLogger)&&(B=A(),M=B.Worker(),window.getCrashedLogFile=function(){return new Promise((function(e){M.addEventListener("message",(function(t){e(atob(JSON.parse(t.data).data))})),M.postMessage(JSON.stringify({tag:"GetFileExt"}))}))},window.logger=B),e({NewCmix:j,NewSynchronizedCmix:X,LoadCmix:W,LoadNotifications:S,LoadNotificationsDummy:R,LoadSynchronizedCmix:U,GetChannelInfo:p,GenerateChannelIdentity:w,GetDefaultCMixParams:g,NewChannelsManagerWithIndexedDb:T,Base64ToUint8Array:u,LoadChannelsManagerWithIndexedDb:L,GetPublicChannelIdentityFromPrivate:y,IsNicknameValid:I,GetShareUrlType:_,GetVersion:k,GetClientVersion:x,GetOrInitPassword:v,GetWasmSemanticVersion:D,ImportPrivateIdentity:P,ConstructIdentity:h,DecodePrivateURL:m,DecodePublicURL:f,GetChannelJSON:b,NewDMClientWithIndexedDb:C,NewDatabaseCipher:O,NewDummyTrafficManager:E,Purge:N,ValidForever:G}),[2]}}))}))}))}},39:(e,t,n)=>{function i(e){console.trace("[XXDK] logFileWorker loading from: "+e.toString());const t=new Promise((e=>{self.onWasmInitialized=e})),n=new Go;WebAssembly.instantiateStreaming(fetch(e),n.importObject).then((async e=>{n.run(e.instance),await t,console.info("[XXDK] logFileWorker started")})).catch((e=>{console.error(e)}))}function s(e){console.trace("[XXDK] channelsIndexedDbWorker loading from: "+e.toString());const t=new Promise((e=>{self.onWasmInitialized=e})),n=new Go;n.argv=["--logLevel=2","--threadLogLevel=2"],WebAssembly.instantiateStreaming(fetch(e),n.importObject).then((async e=>{n.run(e.instance),await t,console.info("[XXDK] channelsIndexedDbWorker started")})).catch((e=>{console.error(e)}))}function o(e){console.trace("[XXDK] dmIndexedDbWorker loading from: "+e.toString());const t=new Promise((e=>{self.onWasmInitialized=e})),n=new Go;n.argv=["--logLevel=2","--threadLogLevel=2"],WebAssembly.instantiateStreaming(fetch(e),n.importObject).then((async e=>{n.run(e.instance),await t,console.info("[XXDK] dmIndexedDbWorker started")})).catch((e=>{console.error(e)}))}function r(e){console.trace("[XXDK] stateIndexedDbWorker loading from: "+e.toString());const t=new Promise((e=>{self.onWasmInitialized=e})),n=new Go;n.argv=["--logLevel=2","--threadLogLevel=2"],WebAssembly.instantiateStreaming(fetch(e),n.importObject).then((async e=>{n.run(e.instance),await t,console.info("[XXDK] stateIndexedDbWorker started")})).catch((e=>{console.error(e)}))}n.r(t),n.d(t,{startChannelsIndexedDbWorker:()=>s,startDmIndexedDbWorker:()=>o,startLogFileWorker:()=>i,startStateIndexedDbWorker:()=>r})},385:()=>{(()=>{const e=()=>{const e=new Error("not implemented");return e.code="ENOSYS",e};if(!globalThis.fs){let t="";globalThis.fs={constants:{O_WRONLY:-1,O_RDWR:-1,O_CREAT:-1,O_TRUNC:-1,O_APPEND:-1,O_EXCL:-1},writeSync(e,i){t+=n.decode(i);const s=t.lastIndexOf("\n");return-1!=s&&(console.log(t.substring(0,s)),t=t.substring(s+1)),i.length},write(t,n,i,s,o,r){0===i&&s===n.length&&null===o?r(null,this.writeSync(t,n)):r(e())},chmod(t,n,i){i(e())},chown(t,n,i,s){s(e())},close(t,n){n(e())},fchmod(t,n,i){i(e())},fchown(t,n,i,s){s(e())},fstat(t,n){n(e())},fsync(e,t){t(null)},ftruncate(t,n,i){i(e())},lchown(t,n,i,s){s(e())},link(t,n,i){i(e())},lstat(t,n){n(e())},mkdir(t,n,i){i(e())},open(t,n,i,s){s(e())},read(t,n,i,s,o,r){r(e())},readdir(t,n){n(e())},readlink(t,n){n(e())},rename(t,n,i){i(e())},rmdir(t,n){n(e())},stat(t,n){n(e())},symlink(t,n,i){i(e())},truncate(t,n,i){i(e())},unlink(t,n){n(e())},utimes(t,n,i,s){s(e())}}}if(globalThis.process||(globalThis.process={getuid:()=>-1,getgid:()=>-1,geteuid:()=>-1,getegid:()=>-1,getgroups(){throw e()},pid:-1,ppid:-1,umask(){throw e()},cwd(){throw e()},chdir(){throw e()}}),!globalThis.crypto)throw new Error("globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)");if(!globalThis.performance)throw new Error("globalThis.performance is not available, polyfill required (performance.now only)");if(!globalThis.TextEncoder)throw new Error("globalThis.TextEncoder is not available, polyfill required");if(!globalThis.TextDecoder)throw new Error("globalThis.TextDecoder is not available, polyfill required");const t=new TextEncoder("utf-8"),n=new TextDecoder("utf-8");globalThis.Go=class{constructor(){this.argv=["js"],this.env={},this.exit=e=>{0!==e&&console.warn("exit code:",e)},this._exitPromise=new Promise((e=>{this._resolveExitPromise=e})),this._pendingEvent=null,this._scheduledTimeouts=new Map,this._nextCallbackTimeoutID=1;const e=(e,t)=>{this.mem.setUint32(e+0,t,!0),this.mem.setUint32(e+4,Math.floor(t/4294967296),!0)},i=e=>this.mem.getUint32(e+0,!0)+4294967296*this.mem.getInt32(e+4,!0),s=e=>{const t=this.mem.getFloat64(e,!0);if(0===t)return;if(!isNaN(t))return t;const n=this.mem.getUint32(e,!0);return this._values[n]},o=(e,t)=>{const n=2146959360;if("number"==typeof t&&0!==t)return isNaN(t)?(this.mem.setUint32(e+4,n,!0),void this.mem.setUint32(e,0,!0)):void this.mem.setFloat64(e,t,!0);if(void 0===t)return void this.mem.setFloat64(e,0,!0);let i=this._ids.get(t);void 0===i&&(i=this._idPool.pop(),void 0===i&&(i=this._values.length),this._values[i]=t,this._goRefCounts[i]=0,this._ids.set(t,i)),this._goRefCounts[i]++;let s=0;switch(typeof t){case"object":null!==t&&(s=1);break;case"string":s=2;break;case"symbol":s=3;break;case"function":s=4}this.mem.setUint32(e+4,n|s,!0),this.mem.setUint32(e,i,!0)},r=e=>{const t=i(e+0),n=i(e+8);return new Uint8Array(this._inst.exports.mem.buffer,t,n)},a=e=>{const t=i(e+0),n=i(e+8),o=new Array(n);for(let e=0;e<n;e++)o[e]=s(t+8*e);return o},l=e=>{const t=i(e+0),s=i(e+8);return n.decode(new DataView(this._inst.exports.mem.buffer,t,s))},c=Date.now()-performance.now();this.importObject={_gotest:{add:(e,t)=>e+t},gojs:{"runtime.wasmExit":e=>{e>>>=0;const t=this.mem.getInt32(e+8,!0);this.exited=!0,delete this._inst,delete this._values,delete this._goRefCounts,delete this._ids,delete this._idPool,this.exit(t)},"runtime.wasmWrite":e=>{const t=i(8+(e>>>=0)),n=i(e+16),s=this.mem.getInt32(e+24,!0);fs.writeSync(t,new Uint8Array(this._inst.exports.mem.buffer,n,s))},"runtime.resetMemoryDataView":e=>{this.mem=new DataView(this._inst.exports.mem.buffer)},"runtime.nanotime1":t=>{e(8+(t>>>=0),1e6*(c+performance.now()))},"runtime.walltime":t=>{t>>>=0;const n=(new Date).getTime();e(t+8,n/1e3),this.mem.setInt32(t+16,n%1e3*1e6,!0)},"runtime.scheduleTimeoutEvent":e=>{e>>>=0;const t=this._nextCallbackTimeoutID;this._nextCallbackTimeoutID++,this._scheduledTimeouts.set(t,setTimeout((()=>{for(this._resume();this._scheduledTimeouts.has(t);)console.warn("scheduleTimeoutEvent: missed timeout event"),this._resume()}),i(e+8))),this.mem.setInt32(e+16,t,!0)},"runtime.clearTimeoutEvent":e=>{e>>>=0;const t=this.mem.getInt32(e+8,!0);clearTimeout(this._scheduledTimeouts.get(t)),this._scheduledTimeouts.delete(t)},"runtime.getRandomData":e=>{e>>>=0,crypto.getRandomValues(r(e+8))},"syscall/js.finalizeRef":e=>{e>>>=0;const t=this.mem.getUint32(e+8,!0);if(this._goRefCounts[t]--,0===this._goRefCounts[t]){const e=this._values[t];this._values[t]=null,this._ids.delete(e),this._idPool.push(t)}},"syscall/js.stringVal":e=>{o(24+(e>>>=0),l(e+8))},"syscall/js.valueGet":e=>{e>>>=0;const t=Reflect.get(s(e+8),l(e+16));e=this._inst.exports.getsp()>>>0,o(e+32,t)},"syscall/js.valueSet":e=>{e>>>=0,Reflect.set(s(e+8),l(e+16),s(e+32))},"syscall/js.valueDelete":e=>{e>>>=0,Reflect.deleteProperty(s(e+8),l(e+16))},"syscall/js.valueIndex":e=>{o(24+(e>>>=0),Reflect.get(s(e+8),i(e+16)))},"syscall/js.valueSetIndex":e=>{e>>>=0,Reflect.set(s(e+8),i(e+16),s(e+24))},"syscall/js.valueCall":e=>{e>>>=0;try{const t=s(e+8),n=Reflect.get(t,l(e+16)),i=a(e+32),r=Reflect.apply(n,t,i);e=this._inst.exports.getsp()>>>0,o(e+56,r),this.mem.setUint8(e+64,1)}catch(t){e=this._inst.exports.getsp()>>>0,o(e+56,t),this.mem.setUint8(e+64,0)}},"syscall/js.valueInvoke":e=>{e>>>=0;try{const t=s(e+8),n=a(e+16),i=Reflect.apply(t,void 0,n);e=this._inst.exports.getsp()>>>0,o(e+40,i),this.mem.setUint8(e+48,1)}catch(t){e=this._inst.exports.getsp()>>>0,o(e+40,t),this.mem.setUint8(e+48,0)}},"syscall/js.valueNew":e=>{e>>>=0;try{const t=s(e+8),n=a(e+16),i=Reflect.construct(t,n);e=this._inst.exports.getsp()>>>0,o(e+40,i),this.mem.setUint8(e+48,1)}catch(t){e=this._inst.exports.getsp()>>>0,o(e+40,t),this.mem.setUint8(e+48,0)}},"syscall/js.valueLength":t=>{e(16+(t>>>=0),parseInt(s(t+8).length))},"syscall/js.valuePrepareString":n=>{n>>>=0;const i=t.encode(String(s(n+8)));o(n+16,i),e(n+24,i.length)},"syscall/js.valueLoadString":e=>{const t=s(8+(e>>>=0));r(e+16).set(t)},"syscall/js.valueInstanceOf":e=>{e>>>=0,this.mem.setUint8(e+24,s(e+8)instanceof s(e+16)?1:0)},"syscall/js.copyBytesToGo":t=>{const n=r(8+(t>>>=0)),i=s(t+32);if(!(i instanceof Uint8Array||i instanceof Uint8ClampedArray))return void this.mem.setUint8(t+48,0);const o=i.subarray(0,n.length);n.set(o),e(t+40,o.length),this.mem.setUint8(t+48,1)},"syscall/js.copyBytesToJS":t=>{const n=s(8+(t>>>=0)),i=r(t+16);if(!(n instanceof Uint8Array||n instanceof Uint8ClampedArray))return void this.mem.setUint8(t+48,0);const o=i.subarray(0,n.length);n.set(o),e(t+40,o.length),this.mem.setUint8(t+48,1)},debug:e=>{console.log(e)},"gitlab.com/elixxir/wasm-utils/exception.throw":e=>{const t=l(e+8),n=l(e+24);throw new Error(t+": "+n)},"runtime.Throw":e=>{const t=l(e+8),n=l(e+24);throw new Error(t+": "+n)}}},this.importObject.go=this.importObject.gojs}async run(e){if(!(e instanceof WebAssembly.Instance))throw new Error("Go.run: WebAssembly.Instance expected");this._inst=e,this.mem=new DataView(this._inst.exports.mem.buffer),this._values=[NaN,0,null,!0,!1,globalThis,this],this._goRefCounts=new Array(this._values.length).fill(1/0),this._ids=new Map([[0,1],[null,2],[!0,3],[!1,4],[globalThis,5],[this,6]]),this._idPool=[],this.exited=!1;let n=4096;const i=e=>{const i=n,s=t.encode(e+"\0");return new Uint8Array(this.mem.buffer,n,s.length).set(s),n+=s.length,n%8!=0&&(n+=8-n%8),i},s=this.argv.length,o=[];this.argv.forEach((e=>{o.push(i(e))})),o.push(0),Object.keys(this.env).sort().forEach((e=>{o.push(i(`${e}=${this.env[e]}`))})),o.push(0);const r=n;if(o.forEach((e=>{this.mem.setUint32(n,e,!0),this.mem.setUint32(n+4,0,!0),n+=8})),n>=12288)throw new Error("total length of command line and environment variables exceeds limit");this._inst.exports.run(s,r),this.exited&&this._resolveExitPromise(),await this._exitPromise}_resume(){if(this.exited)throw new Error("Go program has already exited");this._inst.exports.resume(),this.exited&&this._resolveExitPromise()}_makeFuncWrapper(e){const t=this;return function(){const n={id:e,this:this,args:arguments};return t._pendingEvent=n,t._resume(),n.result}}}})()},862:(e,t,n)=>{e.exports=n.p+"assets/wasm/41e06b82609bab158e36.wasm"},526:(e,t,n)=>{e.exports=n.p+"assets/wasm/413e3fe6acc8b6379cf6.wasm"},861:(e,t,n)=>{e.exports=n.p+"assets/wasm/5ca565391194302a4b64.wasm"},162:(e,t,n)=>{e.exports=n.p+"assets/wasm/072c34c1f3be95b10449.wasm"},947:(e,t,n)=>{e.exports=n.p+"assets/wasm/2bc114dbdc69dfdbda4b.wasm"},147:e=>{e.exports=JSON.parse('{"name":"xxdk-wasm","version":"0.3.19","description":"WebAssembly bindings for xxDK.","main":"dist/bundle.js","directories":{"test":"test","src":"src"},"files":["dist/*"],"scripts":{"clean":"rm -rf dist","build":"make binaries && npm run clean && webpack --mode production","devbuild":"npm run clean && webpack","test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"https://git.xx.network/elixxir/xxdk-wasm.git"},"keywords":["xx","xxnetwork","mixnet","privacy"],"author":"Richard T. Carback III","license":"BSD-2-Clause","devDependencies":{"@babel/preset-env":"^7.23.9","@babel/preset-typescript":"^7.23.3","@types/node":"^20.11.17","babel-loader":"^9.1.3","safe-buffer":"^5.2.1","ts-loader":"^9.5.1","tsc":"^2.0.4","typescript":"^5.3.3","undici-types":"^6.5.0","webpack":"^5.90.0","webpack-cli":"^5.1.4"},"dependencies":{"ts.data.json":"^2.2.0"}}')}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}return n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.p="/dist/",n(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,